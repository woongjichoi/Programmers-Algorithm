# 중간에 주석 무더기 왜 for order~ 아래로 들어가야 하는지 고민해보기 ★

# 아이디어는 내가, 함수로 분리하는 건 남의 풀이 
def calculate(a,b,c):
    if a=="-":
        return str(int(b)-int(c))
    elif a=="+":
        return str(int(b)+int(c))
    elif a=="*":
        return str(int(b)*int(c))
                    
def solution(expression):
    from itertools import permutations
    
    max_money=0
    
    # 사용된 연산자 
    operators=[]
    for alphabet in expression:
        if alphabet.isdigit()==False:
            operators.append(alphabet)
    operators=set(operators)
    
    orders=list(permutations(operators,len(operators)))
    
    #t=[]
    # [100,-,200,*,...] 이런 식으로 여러 연산자를 기준으로 split하고 싶었음
    #temp=""
    #for i in range(len(expression)):
        #if expression[i].isdigit():
            #temp+=expression[i]
        #else:
            #t.append(temp)
            #t.append(expression[i])
            #temp=""
    #t.append(temp) # ['100', '-', '200', '*', '300', '-', '500']
    
    for order in orders:
        
        # [100,-,200,*,...] 이런 식으로 여러 연산자를 기준으로 split하고 싶었음
        t=[]
        temp=""
        for i in range(len(expression)):
            if expression[i].isdigit():
                temp+=expression[i]
            else:
                t.append(temp)
                t.append(expression[i])
                temp=""
        t.append(temp) # ['100', '-', '200', '*', '300', '-', '500']
        
        for i in range(len(order)):
            #★
            stack=[]
            while len(t)>0:
                a=t.pop(0)
                if a!=order[i]:
                    stack.append(a)
                else:
                    stack.append(calculate(order[i],stack.pop(),t.pop(0)))
            t=stack #★
        if abs(int(stack[0]))>max_money:
            max_money=abs(int(stack[0]))
    
    return max_money